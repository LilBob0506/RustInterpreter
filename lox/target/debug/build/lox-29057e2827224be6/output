[TreeType { base_class_name: "Assign", class_name: "AssignExpr", fields: ["Token name", "Rc<Expr> value"] }, TreeType { base_class_name: "Binary", class_name: "BinaryExpr", fields: ["Rc<Expr> left", "Token operator", "Rc<Expr> right"] }, TreeType { base_class_name: "Call", class_name: "CallExpr", fields: ["Rc<Expr> callee", "Token paren", "Vec<Rc<Expr>> arguments"] }, TreeType { base_class_name: "Get", class_name: "GetExpr", fields: ["Rc<Expr> object", "Token name"] }, TreeType { base_class_name: "Grouping", class_name: "GroupingExpr", fields: ["Rc<Expr> expression"] }, TreeType { base_class_name: "Literal", class_name: "LiteralExpr", fields: ["Option<Object> value"] }, TreeType { base_class_name: "Logical", class_name: "LogicalExpr", fields: ["Rc<Expr> left", "Token operator", "Rc<Expr> right"] }, TreeType { base_class_name: "Set", class_name: "SetExpr", fields: ["Rc<Expr> object", "Token name", "Rc<Expr> value"] }, TreeType { base_class_name: "Super", class_name: "SuperExpr", fields: ["Token keyword", "Token method"] }, TreeType { base_class_name: "This", class_name: "ThisExpr", fields: ["Token keyword"] }, TreeType { base_class_name: "Unary", class_name: "UnaryExpr", fields: ["Token operator", "Rc<Expr> right"] }, TreeType { base_class_name: "Variable", class_name: "VariableExpr", fields: ["Token name"] }]
[TreeType { base_class_name: "Block", class_name: "BlockStmt", fields: ["Rc<Vec<Rc<Stmt>>> statements"] }, TreeType { base_class_name: "Class", class_name: "ClassStmt", fields: ["Token name", "Option<Rc<Expr>> superclass", "Rc<Vec<Rc<Stmt>>> methods"] }, TreeType { base_class_name: "Break", class_name: "BreakStmt", fields: ["Token token"] }, TreeType { base_class_name: "Expression", class_name: "ExpressionStmt", fields: ["Rc<Expr> expression"] }, TreeType { base_class_name: "Function", class_name: "FunctionStmt", fields: ["Token name", "Rc<Vec<Token>> params", "Rc<Vec<Rc<Stmt>>> body"] }, TreeType { base_class_name: "If", class_name: "IfStmt", fields: ["Rc<Expr> condition", "Rc<Stmt> then_branch", "Option<Rc<Stmt>> else_branch"] }, TreeType { base_class_name: "Print", class_name: "PrintStmt", fields: ["Rc<Expr> expression"] }, TreeType { base_class_name: "Return", class_name: "ReturnStmt", fields: ["Token keyword", "Option<Rc<Expr>> value"] }, TreeType { base_class_name: "Var", class_name: "VarStmt", fields: ["Token name", "Option<Rc<Expr>> initializer"] }, TreeType { base_class_name: "While", class_name: "WhileStmt", fields: ["Rc<Expr> condition", "Rc<Stmt> body"] }]
